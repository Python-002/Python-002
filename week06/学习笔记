1.启动django的三个过程：
（1）创建Django的项目
（2）创建应用程序
（3）启动

2.创建Django项目
    django-admin startproject name
    cd MyDjango/
    python manage.py startapp index
    python manage.py runserver #默认启动
    pyhton manage.py runserver 0.0.0.0:80 #其他人也可以访问

3.setting文件
"""
Django settings for MyDjango project.

Generated by 'django-admin startproject' using Django 2.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

### 项目路径
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'o0!zv^hh_m$3^-uax19b^456ko5b8#t_-dya76^qf8k!n8+6#*'

### 调试模式
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

### 域名访问权限 但是一般不在此处对域名访问进行配置
ALLOWED_HOSTS = []

###APP列表
# Application definition

### 不要改变书写顺序，如果自己要添加，则顺序加在后面即可，因为django的处理规则是从上到下依次加载这些应用程序的
INSTALLED_APPS = [
    ### 内置的后台管理系统
    'django.contrib.admin',
    ### 内置的用户认证系统
    'django.contrib.auth',
    ###  所有的model元数据
    'django.contrib.contenttypes',
    ### 会话，表示当前访问网站的用户身份
    'django.contrib.sessions',
    ### 消息提示
    'django.contrib.messages',
    ### 静态资源路径
    'django.contrib.staticfiles',
]

#### 中间件是request和response对象之间的钩子，中间件同样有顺序问题
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'MyDjango.urls'

TEMPLATES = [
    {
        ### 定义模板引擎
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        ### 设置模板路径，一般不在此处设置，一般在每一个应用程序里边放置模板
        'DIRS': [],
        ###是否在app里查找模板文件
        'APP_DIRS': True,
        #### 拥有RequestContext上下文的调用函数
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'MyDjango.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
#### 数据库配置，默认是sqlite，Django2.2使用mysqlclient或pymysql模块连接MySQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

# export PATH=$PATH:/usr/local/mysql/bin
# OSError: mysql_config not found
# pip install mysqlclient
# pip install pymysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test',
        'USER': 'root',
        'PASSWORD': 'rootroot',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
    # 生产环境有可能连接第二个数据库
    # 'db2': {
    #     'ENGINE': 'django.db.backends.mysql',
    #     'NAME': 'mydatabase',
    #     'USER': 'mydatabaseuser',
    #     'PASSWORD': 'mypassword',
    #     'HOST': '127.0.0.1',
    #     'PORT': '3307',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/
# 编码要修改成utf-8
LANGUAGE_CODE = 'en-us'

# 时区也要修改成实际环境的
TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

5.想自定义url的匹配规则，
    （1）在register_converter()注册


6.django的快捷函数（比较常用的）
    1.render()
    2.redirect()
    3.get_object_or_404（）

7.在Django通过ORM生成表结构：
from django,db import models

class Person(model.Model):
    id = models.IntegerField(primaty_key = True)
    first_name = model.CharField(max_length=30)
    last_name = model.CharField(max _length=30)

等价于在sql中（)

CREATE TABLE myapp_person(
    "id" serial NOT NULL PRIMARY KEY,
    "first_name" varchar(30) NOT NULL,
    "last_name" varchar(30) NOT NULL
);
 
在python中执行python manage.py makemigrations
            python manage.py migrate
即可进行ORM到sql表的转换

7.我们可以把ORM放在view视图里面，对数据进行操作。操作完成之后，可以返回操作结果到网页里去。

7.models.py里面
class T1(models.Model):
    xxxx....
    class Meta:
        managed = False
    ....

当managed = False 时，表示不能通过ORM（migrate）转换成我们对于的表了，即创建，删除，迁移时Django就会自动把这张表忽略掉

8.view里面的判断条件：
gt:表示大于 
lt:表示小于
gte:表示大于等于
lte:表示小于等于
例子：
queryset = T1.objects.values('sentiment')
conditions = {'sentiment_gte':0.5}
plus = queryset.filter(**conditions).count()

9.调试模式仅用于开发，而生产模式要加上wsgi

10.常见报错
(1)  django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named 'MySQLdb'
解决方法：在 __init__.py 文件中添加以下代码即可
import pymysql
pymysql.install_as_MySQLdb()

(2)   version = Database.version_info
# if version < (1, 3, 13):
# raise ImproperlyConfigured('mysqlclient 1.3.13 or newer is required; you have %s.' % Database.__version__)

(3)  AttributeError: 'str' object has no attribute 'decode'
出现这个错误之后可以根据错误提示找到文件位置，打开 operations.py 文件，找到以下代码：
def last_executed_query(self, cursor, sql, params):
    query = getattr(cursor, '_executed', None)
    # if query is not None:
    #     query = query.decode(errors='replace')
    return query
